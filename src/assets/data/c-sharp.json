[
    {
      "question": "What is C#?",
      "answer": "C# is a modern, object-oriented programming language developed by Microsoft.",
      "topic": "C#"
    },
    {
      "question": "What are the main features of C#?",
      "answer": "Features include strong typing, imperative, declarative, functional, generic, object-oriented, and component-oriented programming disciplines.",
      "topic": "C#"
    },
    {
      "question": "What is the difference between value types and reference types in C#?",
      "answer": "Value types store data directly, while reference types store a reference to the data's memory address.",
      "topic": "C#"
    },
    {
      "question": "What is an assembly in C#?",
      "answer": "An assembly is a compiled code library used for deployment, versioning, and security in .NET applications.",
      "topic": "C#"
    },
    {
      "question": "What is the difference between a class and an object in C#?",
      "answer": "A class is a blueprint for creating objects, which are instances of classes.",
      "topic": "C#"
    },
    {
      "question": "What is inheritance in C#?",
      "answer": "Inheritance is a feature that allows a class to inherit properties and methods from another class.",
      "topic": "C#"
    },
    {
      "question": "What is polymorphism in C#?",
      "answer": "Polymorphism is the ability of a method, property, or object to take on many forms.",
      "topic": "C#"
    },
    {
      "question": "What is encapsulation in C#?",
      "answer": "Encapsulation is the concept of wrapping data and methods into a single unit and restricting access to the internals of that class.",
      "topic": "C#"
    },
    {
      "question": "What is an interface in C#?",
      "answer": "An interface is a contract that defines a set of methods and properties without implementation.",
      "topic": "C#"
    },
    {
      "question": "What is the difference between an abstract class and an interface?",
      "answer": "Abstract classes can have implementations for some of its members, but interfaces cannot. A class can implement multiple interfaces but only inherit from one class.",
      "topic": "C#"
    },
    {
      "question": "What is a delegate in C#?",
      "answer": "A delegate is a type that represents references to methods with a particular parameter list and return type.",
      "topic": "C#"
    },
    {
      "question": "What is an event in C#?",
      "answer": "An event is a way for a class to provide notifications when something of interest occurs.",
      "topic": "C#"
    },
    {
      "question": "What is a lambda expression in C#?",
      "answer": "A lambda expression is an anonymous function that can contain expressions and statements.",
      "topic": "C#"
    },
    {
      "question": "What is LINQ in C#?",
      "answer": "LINQ (Language Integrated Query) is a set of technologies based on the integration of query capabilities directly into the C# language.",
      "topic": "C#"
    },
    {
      "question": "What is asynchronous programming in C#?",
      "answer": "Asynchronous programming allows methods to run in the background while the main program continues to run, improving performance and responsiveness.",
      "topic": "C#"
    },
    {
      "question": "What is the 'async' and 'await' keyword in C#?",
      "answer": "The 'async' keyword indicates that a method is asynchronous, and the 'await' keyword is used to wait for the completion of an asynchronous operation.",
      "topic": "C#"
    },
    {
      "question": "What is exception handling in C#?",
      "answer": "Exception handling is a mechanism to handle runtime errors using try, catch, and finally blocks.",
      "topic": "C#"
    },
    {
      "question": "What is a namespace in C#?",
      "answer": "A namespace is a container that holds classes, structs, enums, delegates, and interfaces, providing a way to organize and control the scope of these elements.",
      "topic": "C#"
    },
    {
      "question": "What are generics in C#?",
      "answer": "Generics allow you to define classes, methods, and data structures with a placeholder for the data type, increasing code reusability and type safety.",
      "topic": "C#"
    },
    {
      "question": "What is the difference between 'const' and 'readonly' in C#?",
      "answer": "'const' is a compile-time constant, and 'readonly' is a runtime constant.",
      "topic": "C#"
    },
    {
      "question": "What is the 'using' statement in C#?",
      "answer": "The 'using' statement is used to include a namespace in the file or to ensure the disposal of resources.",
      "topic": "C#"
    },
    {
      "question": "What is the 'this' keyword in C#?",
      "answer": "'this' is a reference to the current instance of the class.",
      "topic": "C#"
    },
    {
      "question": "What is the 'base' keyword in C#?",
      "answer": "'base' is used to access members of the base class from a derived class.",
      "topic": "C#"
    },
    {
      "question": "What is method overloading in C#?",
      "answer": "Method overloading allows multiple methods in the same class to have the same name but different parameters.",
      "topic": "C#"
    },
    {
      "question": "What is method overriding in C#?",
      "answer": "Method overriding allows a derived class to provide a specific implementation of a method that is already defined in its base class.",
      "topic": "C#"
    },
    {
      "question": "What is the difference between 'new' and 'override' in C#?",
      "answer": "'new' hides a method in the base class, while 'override' extends or modifies the method behavior in a derived class.",
      "topic": "C#"
    },
    {
      "question": "What is a constructor in C#?",
      "answer": "A constructor is a special method that is called when an instance of a class is created, used to initialize the object.",
      "topic": "C#"
    },
    {
      "question": "What is a destructor in C#?",
      "answer": "A destructor is a method called when an object is being garbage collected to perform cleanup operations.",
      "topic": "C#"
    },
    {
      "question": "What is a property in C#?",
      "answer": "A property is a member that provides a flexible mechanism to read, write, or compute the value of a private field.",
      "topic": "C#"
    },
    {
      "question": "What is an indexer in C#?",
      "answer": "An indexer allows instances of a class or struct to be indexed like arrays.",
      "topic": "C#"
    },
    {
      "question": "What is the difference between 'ref' and 'out' parameters?",
      "answer": "'ref' requires that the variable be initialized before being passed, while 'out' does not.",
      "topic": "C#"
    },
    {
      "question": "What is the purpose of the 'lock' statement in C#?",
      "answer": "The 'lock' statement is used to ensure that a block of code runs without interruption by multiple threads.",
      "topic": "C#"
    },
    {
      "question": "What is a thread in C#?",
      "answer": "A thread is a path of execution within a process, allowing for concurrent operations.",
      "topic": "C#"
    },
    {
      "question": "What is a task in C#?",
      "answer": "A task represents an asynchronous operation that can be awaited and managed.",
      "topic": "C#"
    },
    {
      "question": "What is reflection in C#?",
      "answer": "Reflection is the ability to inspect and interact with the metadata of types at runtime.",
      "topic": "C#"
    },
    {
      "question": "What is garbage collection in C#?",
      "answer": "Garbage collection is the process of automatically reclaiming memory by deleting objects that are no longer in use.",
      "topic": "C#"
    },
    {
      "question": "What is the 'yield' keyword in C#?",
      "answer": "The 'yield' keyword is used in an iterator to return each element one at a time.",
      "topic": "C#"
    },
    {
      "question": "What is the difference between 'Array' and 'ArrayList' in C#?",
      "answer": "'Array' is of fixed size and can store elements of the same type, while 'ArrayList' can grow dynamically and store elements of different types.",
      "topic": "C#"
    },
    {
      "question": "What is a nullable type in C#?",
      "answer": "A nullable type is a value type that can also hold a null value, indicating the absence of a value.",
      "topic": "C#"
    },
    {
      "question": "What is an enum in C#?",
      "answer": "An enum is a distinct type that consists of a set of named constants called the enumerator list.",
      "topic": "C#"
    },
    {
      "question": "What is a struct in C#?",
      "answer": "A struct is a value type that is typically used to encapsulate small groups of related variables.",
      "topic": "C#"
    },
    {
      "question": "What is a record in C#?",
      "answer": "A record is a reference type that provides built-in functionality for encapsulating data with value equality.",
      "topic": "C#"
    },
    {
      "question": "What is operator overloading in C#?",
      "answer": "Operator overloading allows you to define how operators work with your custom types.",
      "topic": "C#"
    },
    {
      "question": "What is the difference between '== operator' and 'Equals()' method in C#?",
      "answer": "'==' compares reference equality for reference types and value equality for value types, while 'Equals()' can be overridden to provide custom equality logic.",
      "topic": "C#"
    },
    {
      "question": "What is the Singleton pattern in C#?",
      "answer": "The Singleton pattern ensures that a class has only one instance and provides a global point of access to it.",
      "topic": "C#"
    },
    {
      "question": "What is the Factory pattern in C#?",
      "answer": "The Factory pattern defines an interface for creating an object but allows subclasses to alter the type of objects that will be created.",
      "topic": "C#"
    },
    {
      "question": "What is the purpose of the IDisposable interface?",
      "answer": "The IDisposable interface provides a mechanism for releasing unmanaged resources.",
      "topic": "C#"
    },
    {
      "question": "What are extension methods in C#?",
      "answer": "Extension methods allow you to add new methods to existing types without modifying them.",
      "topic": "C#"
    }
  ]
  
  