  [
    {
      "question": "What is .NET Core?",
      "answer": ".NET Core is a free, cross-platform, open-source framework for building modern, cloud-based, and internet-connected applications.",
      "topic": ".NET Core Web API"
    },
    {
      "question": "What is ASP.NET Core?",
      "answer": "ASP.NET Core is a cross-platform, high-performance framework for building modern, cloud-based, internet-connected applications.",
      "topic": ".NET Core Web API"
    },
    {
      "question": "What is a Web API?",
      "answer": "A Web API is an application programming interface for either a web server or a web browser, allowing communication and data exchange.",
      "topic": ".NET Core Web API"
    },
    {
      "question": "What are the benefits of using ASP.NET Core Web API?",
      "answer": "Benefits include cross-platform support, high performance, dependency injection, unified programming model, and built-in support for modern development practices.",
      "topic": ".NET Core Web API"
    },
    {
      "question": "How do you create a new ASP.NET Core Web API project?",
      "answer": "You can create a new project using the .NET CLI command 'dotnet new webapi' or through Visual Studio by selecting the 'ASP.NET Core Web API' template.",
      "topic": ".NET Core Web API"
    },
    {
      "question": "What is the purpose of the Startup class in an ASP.NET Core application?",
      "answer": "The Startup class configures the services and the app's request pipeline.",
      "topic": ".NET Core Web API"
    },
    {
      "question": "What is dependency injection in ASP.NET Core?",
      "answer": "Dependency injection is a design pattern used to implement IoC, allowing the application to inject dependencies into a class, rather than the class creating the dependencies.",
      "topic": ".NET Core Web API"
    },
    {
      "question": "What is middleware in ASP.NET Core?",
      "answer": "Middleware is software that's assembled into an application pipeline to handle requests and responses.",
      "topic": ".NET Core Web API"
    },
    {
      "question": "How do you configure routing in ASP.NET Core Web API?",
      "answer": "Routing is configured in the 'Configure' method of the Startup class using endpoint routing or attribute routing.",
      "topic": ".NET Core Web API"
    },
    {
      "question": "What is attribute routing in ASP.NET Core Web API?",
      "answer": "Attribute routing uses attributes to define routes directly on action methods and controllers.",
      "topic": ".NET Core Web API"
    },
    {
      "question": "What is the difference between HTTP GET, POST, PUT, DELETE methods?",
      "answer": "GET retrieves data, POST submits new data, PUT updates existing data, and DELETE removes data.",
      "topic": ".NET Core Web API"
    },
    {
      "question": "How do you handle errors in ASP.NET Core Web API?",
      "answer": "Errors can be handled using exception handling middleware, custom middleware, or try-catch blocks within action methods.",
      "topic": ".NET Core Web API"
    },
    {
      "question": "What is model binding in ASP.NET Core Web API?",
      "answer": "Model binding is the process of mapping HTTP request data to action method parameters.",
      "topic": ".NET Core Web API"
    },
    {
      "question": "What is model validation in ASP.NET Core Web API?",
      "answer": "Model validation checks the data sent in the request to ensure it meets the required criteria, using data annotations or custom validation logic.",
      "topic": ".NET Core Web API"
    },
    {
      "question": "How do you secure an ASP.NET Core Web API?",
      "answer": "Security can be implemented using HTTPS, authentication and authorization, CORS, and data validation.",
      "topic": ".NET Core Web API"
    },
    {
      "question": "What is CORS and why is it important?",
      "answer": "CORS (Cross-Origin Resource Sharing) is a mechanism to allow or restrict requested resources on a web server from different origins. It's important for security in web applications.",
      "topic": ".NET Core Web API"
    },
    {
      "question": "What are filters in ASP.NET Core Web API?",
      "answer": "Filters are used to run code before or after specific stages in the request processing pipeline, such as authorization, resource, action, exception, and result filters.",
      "topic": ".NET Core Web API"
    },
    {
      "question": "How do you version a Web API in ASP.NET Core?",
      "answer": "API versioning can be implemented using URL segment, query string, header, or accept header.",
      "topic": ".NET Core Web API"
    },
    {
      "question": "What is Swagger and how is it used in ASP.NET Core Web API?",
      "answer": "Swagger is a tool used to document and test Web APIs. In ASP.NET Core, it's integrated using the Swashbuckle package.",
      "topic": ".NET Core Web API"
    },
    {
      "question": "What is Entity Framework Core?",
      "answer": "Entity Framework Core is an ORM (Object-Relational Mapper) for .NET Core that provides a way to work with a database using .NET objects.",
      "topic": ".NET Core Web API"
    },
    {
      "question": "How do you connect a Web API to a database using Entity Framework Core?",
      "answer": "You connect by defining a DbContext class, configuring the connection string, and using dependency injection to provide the DbContext to the application.",
      "topic": ".NET Core Web API"
    },
    {
      "question": "What is the role of the 'appsettings.json' file?",
      "answer": "The 'appsettings.json' file is used to store configuration settings such as connection strings, logging settings, and custom configuration sections.",
      "topic": ".NET Core Web API"
    },
    {
      "question": "How do you read configuration settings in ASP.NET Core?",
      "answer": "Configuration settings are read using the IConfiguration interface provided through dependency injection.",
      "topic": ".NET Core Web API"
    },
    {
      "question": "What are DTOs in ASP.NET Core Web API?",
      "answer": "DTOs (Data Transfer Objects) are objects that carry data between processes to reduce the number of method calls.",
      "topic": ".NET Core Web API"
    },
    {
      "question": "How do you implement logging in ASP.NET Core Web API?",
      "answer": "Logging is implemented using the built-in logging framework, which supports various providers such as Console, Debug, and third-party logging libraries.",
      "topic": ".NET Core Web API"
    },
    {
      "question": "What is middleware pipeline in ASP.NET Core?",
      "answer": "The middleware pipeline is the sequence of middleware components that process an HTTP request.",
      "topic": ".NET Core Web API"
    },
    {
      "question": "What is gRPC and how is it used in ASP.NET Core?",
      "answer": "gRPC is a high-performance, cross-platform RPC framework. In ASP.NET Core, it is used to build efficient APIs using HTTP/2.",
      "topic": ".NET Core Web API"
    },
    {
      "question": "What is HATEOAS in the context of Web APIs?",
      "answer": "HATEOAS (Hypermedia As The Engine Of Application State) is a constraint of REST that allows clients to interact with the application entirely through hypermedia provided dynamically by application servers.",
      "topic": ".NET Core Web API"
    },
    {
      "question": "How do you create a custom middleware in ASP.NET Core?",
      "answer": "A custom middleware is created by defining a class with an 'Invoke' or 'InvokeAsync' method and registering it in the request pipeline using the 'app.UseMiddleware' extension method.",
      "topic": ".NET Core Web API"
    },
    {
      "question": "What is Kestrel in ASP.NET Core?",
      "answer": "Kestrel is a cross-platform web server for ASP.NET Core, used to host the application and handle HTTP requests.",
      "topic": ".NET Core Web API"
    },
    {
      "question": "What is the purpose of the Program class in an ASP.NET Core application?",
      "answer": "The Program class defines the entry point of the application and configures the web host.",
      "topic": ".NET Core Web API"
    },
    {
      "question": "What is response caching in ASP.NET Core Web API?",
      "answer": "Response caching reduces the number of requests a client makes to the server by caching responses on the client side.",
      "topic": ".NET Core Web API"
    },
    {
      "question": "How do you handle file uploads in ASP.NET Core Web API?",
      "answer": "File uploads are handled using the IFormFile interface to read the file from the request and save it to the server.",
      "topic": ".NET Core Web API"
    },
    {
      "question": "What is ASP.NET Identity?",
      "answer": "ASP.NET Identity is a membership system that adds login functionality to your application and stores user information.",
      "topic": ".NET Core Web API"
    }
]
  
  